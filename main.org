#+title: Pop!_OS Setup

* Pop!_OS configuration
** Variables

#+begin_src shell :tangle ./pop-os-setup.sh :shebang #!/usr/bin/env bash
MAIN_DIR="$(pwd)"
REQUIRED_PROGRAMS=(wget git zip unzip gzip curl file build-essential procps)
TO_REMOVE=(geary gnome-terminal gnome-orca evince totem xterm)
PROGRAMS_FILE="$MAIN_DIR/aux_files/apt-flatpak-programs.csv"
APT_PROGRAMS=()
FLATPAK_PROGRAMS=()
#+end_src

** Update system

#+begin_src shell :tangle ./pop-os-setup.sh
sudo apt update -y
sudo apt full-upgrade -y
#+end_src

** Reading program files

#+begin_src shell :tangle ./pop-os-setup.sh
while IFS= read line; do
    str_1=$(echo -e "${line%%,*}")
sudo apt dist-upgrade -y
    str_2=$(echo -e "${line##*,}")

    if [[ $str_2 = "apt" ]]; then
        APT_PROGRAMS+=("$str_1")
    else
        FLATPAK_PROGRAMS+=("$str_1")
    fi
done < "$PROGRAMS_FILE"
#+end_src

** Installing required programs

#+begin_src shell :tangle ./pop-os-setup.sh
for app in "${REQUIRED_PROGRAMS[@]}"; do
    if [[ ! -x $(which "$app") ]]; then
        sudo apt install "$app" -y
    fi
done
#+end_src

** Removing locks and adding i386 architecture

#+begin_src shell :tangle ./pop-os-setup.sh
sudo rm /var/lib/dpkg/lock-frontend
sudo rm /var/cache/apt/archives/lock
sudo dpkg --add-architecture i386
#+end_src

** Removing some Pop!_OS default programs

#+begin_src shell :tangle ./pop-os-setup.sh
apt list --installed | grep libreoffice | cut -d "/" -f 1 | tr '\n' ' ' | xargs sudo apt remove -y

for program in "${TO_REMOVE[@]}"; do
    sudo apt remove "$program" -y
done

sudo apt autoremove -y
#+end_src

** Install Nix package manager

#+begin_src shell :tangle ./pop-os-setup.sh
sh <(curl -L https://nixos.org/nix/install) --daemon
echo 'export XDG_DATA_DIRS="$HOME/.nix-profile/share:$XDG_DATA_DIRS' >> "$HOME/.profile"
source "$HOME/.profile"
#+end_src

** Install Nerd Font

#+begin_src shell :tangle ./pop-os-setup.sh
mkdir -p "$HOME/.local/share/fonts/"
cp "$MAIN_DIR/aux_files/SauceCodePro.zip" "$HOME/.local/share/fonts/"
cd "$HOME/.local/share/fonts/"
unzip SauceCodePro.zip
rm SauceCodePro.zip
fc-cache -f -v
cd "$MAIN_DIR"
#+end_src

** Install apt and flatpak programs

#+begin_src shell :tangle ./pop-os-setup.sh
for program in "${APT_PROGRAMS[@]}"; do
    sudo apt install "$program" -y
done

for program in "${FLATPAK_PROGRAMS[@]}"; do
    flatpak install "$program" -y
done
#+end_src

* home-manager setup

#+begin_src shell :tangle ./home-manager-setup.sh :shebang #!/usr/bin/env bash
nix-channel --add https://github.com/nix-community/home-manager/archive/master.tar.gz home-manager
nix-channel --update
echo 'export NIX_PATH=$HOME/.nix-defexpr/channels:/nix/var/nix/profiles/per-user/root/channels${NIX_PATH:+:$NIX_PATH}' >> "$HOME/.bashrc"
#+end_src

* config.nix

#+begin_src nix :tangle ./.dotfiles/.nixpkgs/config.nix
{
  allowUnfree = true;
  environment.pathsToLink = [ "/share/fish" ];
}
#+end_src

* home.nix

#+begin_src nix :tangle ./.dotfiles/.config/nixpkgs/home.nix
{ config, pkgs, ... }:

let
  user = "phrmendes";
in {
  home = {
    stateVersion = "22.11";
    username = "${user}";
    homeDirectory = "/home/${user}";
    packages = with pkgs;
      let
        my-r-packages = rWrapper.override{
          packages = with rPackages; [
            tidyverse
            data_table
            pbapply
            tinytex
            quarto
            styler
            lintr
            zip
            fs
            janitor
            zoo
            curl
          ];
        };
      in
        [
          # TERMINAL PROGRAMS
          btop
          pandoc
          bat
          btop
          gh
          lazygit
          ripgrep
          fd
          sd
          tealdeer
          exa
          shellcheck
          ncdu
          starship
          quarto
          direnv
          niv
          lorri
          ranger
          # PACKAGE MANAGERS
          micromamba
          cargo
          go
          nodejs
          my-r-packages
          # APPS
          emacs
          filezilla
          solaar
          bitwarden
          pcloud
          zotero
          spotify
          fragments
          kooha
          podman
          zathura
          cmdstan
          # OTHERS
          texlive.combined.scheme-minimal
        ];
  };
  programs = {
    fzf = {
      enable = true;
      enableFishIntegration = true;
    };
    fish = {
      enable = true;
      shellAliases = {
        mkdir = "mkdir -p";
        ls = "exa --icons";
        cat = "bat";
        nv = "nvim";
        lg = "lazygit";
      };
      shellAbbrs = {
        stow_dotfiles = "stow --target=$HOME --dir=$HOME/Projects/bkps/ --stow .dotfiles";
        mamba = "micromamba";
      };
      shellInit = ''
        fish_add_path "$HOME/.emacs.d/bin"
        set -gx MAMBA_EXE "/home/phrmendes/.nix-profile/bin/micromamba"
        set -gx MAMBA_ROOT_PREFIX "/home/phrmendes/micromamba"
        eval "/home/phrmendes/.nix-profile/bin/micromamba" shell hook --shell fish --prefix "/home/phrmendes/micromamba" | source
      '';
    };
    neovim = {
      enable = true;
      plugins = with pkgs.vimPlugins; [
        nvim-web-devicons
        nvim-tree-lua
        plenary-nvim
        vim-nix
        vim-fish
        vim-easymotion
        vim-commentary
        vim-gitgutter
        vim-polyglot
        auto-pairs
        fzf-vim
        {
          plugin = gruvbox;
          config = "colorscheme gruvbox";
        }
        {
          plugin = indent-blankline-nvim;
          config = ''
            lua << EOF
            require("indent_blankline").setup()
            EOF
          '';
        }
        {
          plugin = lualine-nvim;
          config = ''
            lua << EOF
            require("lualine").setup({
              options = {
                icons_enabled = true,
                theme = "gruvbox_dark"
              }
            })
            EOF
          '';
        }
      ];
      extraConfig = ''
        set background=dark
        set clipboard+=unnamedplus
        set completeopt=noinsert,menuone,noselect
        set cursorline
        set hidden
        set inccommand=split
        set mouse=a
        set number
        set relativenumber
        set splitbelow splitright
        set title
        set ttimeoutlen=0
        set wildmenu
        set expandtab
        set shiftwidth=2
        set tabstop=2
      '';
      vimAlias = true;
      vimdiffAlias = true;
    };
    starship = {
      enable = true;
      enableFishIntegration = true;
    };
    home-manager.enable = true;
  };
  xdg.enable = true;
  xdg.mime.enable = true;
  targets.genericLinux.enable = true;
}
#+end_src

* Placing dotfiles and installing home-manager apps

#+begin_src shell :tangle ./home-manager-apply.sh :shebang #!/usr/bin/env bash
# home-manager
nix-shell '<home-manager>' -A install
rm "$HOME/.config/nixpkgs/home.nix"
rm "$HOME/.profile"
stow --target="$HOME" --dir="$HOME/Projects/bkps" --stow .dotfiles
home-manager switch

# doom emacs
git clone --depth 1 https://github.com/doomemacs/doomemacs ~/.emacs.d
"$HOME/.emacs.d/bin/doom" install
"$HOME/.emacs.d/bin/doom" sync
#+end_src

Updates: ~home-manager switch~ after applying changes to the ~*.nix~ files.
